import themes from '../js/Themes.js';
import { generateTeam } from './generators';
import { Bowman } from './characters/Bowman';
import { Swordsman } from './characters/swordsman.js';
import { Magician } from './characters/magician.js';
import { Vampire } from './characters/Vampire';
import { Undead } from './characters/undead.js';
import { Daemon } from './characters/daemon.js';
import PositionedCharacter from './PositionedCharacter';

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;

    this.onCellEnter = this.onCellEnter.bind(this);
    this.onCellLeave = this.onCellLeave.bind(this);
  }

  init() {
    this.gamePlay.drawUi(themes.prairie);

    const playerTypes = [Bowman, Swordsman, Magician];
    const playerTeam = generateTeam(playerTypes, 2, 2);

    const enemyTypes = [Vampire, Undead, Daemon];
    const enemyTeam = generateTeam(enemyTypes, 2, 2);

    function generatePositions(teamSize, boardSize, isPlayer) {
      let allowedPositions = [];
      const rows = boardSize / 8; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª–µ –≤—Å–µ–≥–¥–∞ 8x8
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –¥–ª—è –∏–≥—Ä–æ–∫–∞ —ç—Ç–æ –∏–ª–∏ –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      let columns = isPlayer ? [0, 1] : [6, 7];
    
      // –ó–∞–ø–æ–ª–Ω—è–µ–º allowedPositions –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
      for (let row = 0; row < rows; row++) {
        for (let column of columns) {
          allowedPositions.push(row * 8 + column);
        }
      }
    
      // –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö, —É–±–µ–∂–¥–∞—è—Å—å, —á—Ç–æ –æ–Ω–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è
      let positions = [];
      while (positions.length < teamSize) {
        let position = allowedPositions[Math.floor(Math.random() * allowedPositions.length)];
        if (!positions.includes(position)) {
          positions.push(position);
        }
      }
    
      return positions;
    }
    
    const playerPositions = generatePositions(2, 64, true); // –¥–ª—è –∏–≥—Ä–æ–∫–∞
    const enemyPositions = generatePositions(2, 64, false); // –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

    const positionedPlayerCharacters = playerTeam.map((character, index) => {
      return new PositionedCharacter(character, playerPositions[index]);
    });

    const positionedEnemyCharacters = enemyTeam.map((character, index) => {
      return new PositionedCharacter(character, enemyPositions[index]);
    });

    this.gamePlay.redrawPositions([...positionedPlayerCharacters, ...positionedEnemyCharacters]);

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏ –≤ —è—á–µ–π–∫—É –ø–æ–ª—è
    this.gamePlay.addCellEnterListener(this.onCellEnter);
  }

  onCellEnter(index) {
    const character = this.stateService.findCharacterByPosition(index);
    if (character) {
      const characterInfo = this.getCharacterInfo(character);
      this.gamePlay.showCellTooltip(characterInfo, index);
    }
  }

  // –ú–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞ —Å —è—á–µ–π–∫–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
  onCellLeave(index) {
    this.gamePlay.hideCellTooltip(index);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
  getCharacterInfo(character) {
    return `üéñ${character.level} ‚öî${character.attack} üõ°${character.defence} ‚ù§${character.health}`;
  }
}
